{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kavin\\\\Desktop\\\\AI-object identfy CCTV\\\\frontend\\\\src\\\\components\\\\LiveFeed.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LiveFeed = () => {\n  _s();\n  const [isCellPhoneDetected, setIsCellPhoneDetected] = useState(false);\n  const [alarmMessage, setAlarmMessage] = useState('');\n  const [boundingBoxes, setBoundingBoxes] = useState([]);\n  const [isVideoStarted, setIsVideoStarted] = useState(false); // Track if video is started\n  const audioRef = useRef(new Audio('/alert.mp3')); // Use an alert sound file\n\n  useEffect(() => {\n    if (isVideoStarted) {\n      // Polling every 1 second to check if a cell phone is detected\n      const interval = setInterval(() => {\n        fetch('http://127.0.0.1:5000/cell_phone_status').then(response => response.json()).then(data => {\n          setIsCellPhoneDetected(data.cell_phone_detected);\n          setBoundingBoxes(data.bounding_boxes);\n\n          // Play the alert sound only when a cell phone is detected\n          if (data.cell_phone_detected) {\n            setAlarmMessage('ðŸš¨ Cell phone detected! ðŸš¨');\n            // Play sound alert only if cell phone is detected\n            audioRef.current.play().catch(err => console.error('Error playing sound', err));\n          } else {\n            setAlarmMessage('');\n          }\n        }).catch(err => console.error('Error fetching cell phone status', err));\n      }, 1000); // Poll every second\n\n      return () => clearInterval(interval);\n    }\n  }, [isVideoStarted]); // Only start polling after the video feed is started\n\n  const startVideoFeed = () => {\n    setIsVideoStarted(true); // Start video feed when the user clicks the button\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl mb-4\",\n      children: \"Live Video Feed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), !isVideoStarted && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startVideoFeed,\n      className: \"px-6 py-3 bg-blue-500 text-white rounded-lg mb-4\",\n      children: \"Start Live Video Feed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), isVideoStarted && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"http://127.0.0.1:5000/video_feed\",\n      alt: \"Live feed\",\n      className: \"border border-gray-300 rounded-lg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), alarmMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 text-red-600 font-bold text-xl\",\n      children: alarmMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4\",\n      children: boundingBoxes.map((box, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute\",\n        style: {\n          top: `${box[1]}px`,\n          left: `${box[0]}px`,\n          width: `${box[2] - box[0]}px`,\n          height: `${box[3] - box[1]}px`,\n          border: box[4] === 'cell phone' ? '2px solid red' : '2px solid green'\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(LiveFeed, \"UBNWtMbTC+Fo0bwylz9kAaoLopg=\");\n_c = LiveFeed;\nexport default LiveFeed;\nvar _c;\n$RefreshReg$(_c, \"LiveFeed\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","LiveFeed","_s","isCellPhoneDetected","setIsCellPhoneDetected","alarmMessage","setAlarmMessage","boundingBoxes","setBoundingBoxes","isVideoStarted","setIsVideoStarted","audioRef","Audio","interval","setInterval","fetch","then","response","json","data","cell_phone_detected","bounding_boxes","current","play","catch","err","console","error","clearInterval","startVideoFeed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","map","box","index","style","top","left","width","height","border","_c","$RefreshReg$"],"sources":["C:/Users/kavin/Desktop/AI-object identfy CCTV/frontend/src/components/LiveFeed.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\nconst LiveFeed = () => {\r\n  const [isCellPhoneDetected, setIsCellPhoneDetected] = useState(false);\r\n  const [alarmMessage, setAlarmMessage] = useState('');\r\n  const [boundingBoxes, setBoundingBoxes] = useState([]);\r\n  const [isVideoStarted, setIsVideoStarted] = useState(false);  // Track if video is started\r\n  const audioRef = useRef(new Audio('/alert.mp3')); // Use an alert sound file\r\n\r\n  useEffect(() => {\r\n    if (isVideoStarted) {\r\n      // Polling every 1 second to check if a cell phone is detected\r\n      const interval = setInterval(() => {\r\n        fetch('http://127.0.0.1:5000/cell_phone_status')\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            setIsCellPhoneDetected(data.cell_phone_detected);\r\n            setBoundingBoxes(data.bounding_boxes);\r\n\r\n            // Play the alert sound only when a cell phone is detected\r\n            if (data.cell_phone_detected) {\r\n              setAlarmMessage('ðŸš¨ Cell phone detected! ðŸš¨');\r\n              // Play sound alert only if cell phone is detected\r\n              audioRef.current.play().catch((err) => console.error('Error playing sound', err));\r\n            } else {\r\n              setAlarmMessage('');\r\n            }\r\n          })\r\n          .catch(err => console.error('Error fetching cell phone status', err));\r\n      }, 1000);  // Poll every second\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [isVideoStarted]);  // Only start polling after the video feed is started\r\n\r\n  const startVideoFeed = () => {\r\n    setIsVideoStarted(true);  // Start video feed when the user clicks the button\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center\">\r\n      <h2 className=\"text-2xl mb-4\">Live Video Feed</h2>\r\n\r\n      {/* Start button for user interaction */}\r\n      {!isVideoStarted && (\r\n        <button\r\n          onClick={startVideoFeed}\r\n          className=\"px-6 py-3 bg-blue-500 text-white rounded-lg mb-4\"\r\n        >\r\n          Start Live Video Feed\r\n        </button>\r\n      )}\r\n\r\n      {/* Show live video feed only after start */}\r\n      {isVideoStarted && (\r\n        <img\r\n          src=\"http://127.0.0.1:5000/video_feed\"\r\n          alt=\"Live feed\"\r\n          className=\"border border-gray-300 rounded-lg\"\r\n        />\r\n      )}\r\n\r\n      {/* Show alarm message if a cell phone is detected */}\r\n      {alarmMessage && (\r\n        <div className=\"mt-4 text-red-600 font-bold text-xl\">\r\n          {alarmMessage}\r\n        </div>\r\n      )}\r\n\r\n      {/* Render bounding boxes */}\r\n      <div className=\"mt-4\">\r\n        {boundingBoxes.map((box, index) => (\r\n          <div\r\n            key={index}\r\n            className=\"absolute\"\r\n            style={{\r\n              top: `${box[1]}px`,\r\n              left: `${box[0]}px`,\r\n              width: `${box[2] - box[0]}px`,\r\n              height: `${box[3] - box[1]}px`,\r\n              border: box[4] === 'cell phone' ? '2px solid red' : '2px solid green',\r\n            }}\r\n          ></div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LiveFeed;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}