{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kavin\\\\Documents\\\\GitHub\\\\AI-Checking-CCTV\\\\frontend\\\\src\\\\components\\\\LiveFeed.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LiveFeed = () => {\n  _s();\n  const [isGunDetected, setIsGunDetected] = useState(false);\n  const [isKnifeDetected, setIsKnifeDetected] = useState(false);\n  const [alarmMessage, setAlarmMessage] = useState('');\n  const [boundingBoxes, setBoundingBoxes] = useState([]);\n  const [isVideoStarted, setIsVideoStarted] = useState(false); // Track if video is started\n  const audioRef = useRef(null); // Reference for audio element\n\n  useEffect(() => {\n    if (isVideoStarted) {\n      // Polling every 1 second to check if a gun or knife is detected\n      const interval = setInterval(() => {\n        fetch('http://127.0.0.1:5000/detection_status').then(response => response.json()).then(data => {\n          setIsGunDetected(data.gun_detected);\n          setIsKnifeDetected(data.knife_detected);\n          setBoundingBoxes(data.bounding_boxes);\n\n          // Play the alarm sound only when a gun or knife is detected\n          if (data.gun_detected) {\n            setAlarmMessage('ðŸš¨ Gun detected! ðŸš¨');\n            // Play alarm for gun detection\n            if (audioRef.current) {\n              audioRef.current.play().catch(err => {\n                console.error('Error playing sound:', err);\n              });\n            }\n          } else if (data.knife_detected) {\n            setAlarmMessage('ðŸš¨ Knife detected! ðŸš¨');\n            // Play alarm for knife detection\n            if (audioRef.current) {\n              audioRef.current.play().catch(err => {\n                console.error('Error playing sound:', err);\n              });\n            }\n          } else {\n            setAlarmMessage('');\n          }\n        }).catch(err => console.error('Error fetching detection status', err));\n      }, 1000); // Poll every second\n\n      return () => clearInterval(interval);\n    }\n  }, [isVideoStarted]); // Only start polling after the video feed is started\n\n  const startVideoFeed = () => {\n    setIsVideoStarted(true); // Start video feed when the user clicks the button\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl mb-4\",\n      children: \"Live Video Feed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), !isVideoStarted && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startVideoFeed,\n      className: \"px-6 py-3 bg-blue-500 text-white rounded-lg mb-4\",\n      children: \"Start Live Video Feed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), isVideoStarted && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"http://127.0.0.1:5000/video_feed\",\n      alt: \"Live feed\",\n      className: \"border border-gray-300 rounded-lg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this), alarmMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 text-red-600 font-bold text-xl\",\n      children: alarmMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 relative\",\n      children: boundingBoxes.map((box, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute\",\n        style: {\n          top: `${box[1]}px`,\n          left: `${box[0]}px`,\n          width: `${box[2] - box[0]}px`,\n          height: `${box[3] - box[1]}px`,\n          border: box[4] === 'gun' || box[4] === 'knife' ? '2px solid red' : '2px solid green'\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      preload: \"auto\",\n      children: [/*#__PURE__*/_jsxDEV(\"source\", {\n        src: \"/mixkit-classic-alarm-995.wav\",\n        type: \"audio/wav\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), \"Your browser does not support the audio element.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(LiveFeed, \"QNPLPUHmnhzjUG5Rv/pjAmYHNCA=\");\n_c = LiveFeed;\nexport default LiveFeed;\nvar _c;\n$RefreshReg$(_c, \"LiveFeed\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","LiveFeed","_s","isGunDetected","setIsGunDetected","isKnifeDetected","setIsKnifeDetected","alarmMessage","setAlarmMessage","boundingBoxes","setBoundingBoxes","isVideoStarted","setIsVideoStarted","audioRef","interval","setInterval","fetch","then","response","json","data","gun_detected","knife_detected","bounding_boxes","current","play","catch","err","console","error","clearInterval","startVideoFeed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","map","box","index","style","top","left","width","height","border","ref","preload","type","_c","$RefreshReg$"],"sources":["C:/Users/kavin/Documents/GitHub/AI-Checking-CCTV/frontend/src/components/LiveFeed.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\nconst LiveFeed = () => {\r\n  const [isGunDetected, setIsGunDetected] = useState(false);\r\n  const [isKnifeDetected, setIsKnifeDetected] = useState(false);\r\n  const [alarmMessage, setAlarmMessage] = useState('');\r\n  const [boundingBoxes, setBoundingBoxes] = useState([]);\r\n  const [isVideoStarted, setIsVideoStarted] = useState(false);  // Track if video is started\r\n  const audioRef = useRef(null);  // Reference for audio element\r\n\r\n  useEffect(() => {\r\n    if (isVideoStarted) {\r\n      // Polling every 1 second to check if a gun or knife is detected\r\n      const interval = setInterval(() => {\r\n        fetch('http://127.0.0.1:5000/detection_status')\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            setIsGunDetected(data.gun_detected);\r\n            setIsKnifeDetected(data.knife_detected);\r\n            setBoundingBoxes(data.bounding_boxes);\r\n\r\n            // Play the alarm sound only when a gun or knife is detected\r\n            if (data.gun_detected) {\r\n              setAlarmMessage('ðŸš¨ Gun detected! ðŸš¨');\r\n              // Play alarm for gun detection\r\n              if (audioRef.current) {\r\n                audioRef.current.play().catch((err) => {\r\n                  console.error('Error playing sound:', err);\r\n                });\r\n              }\r\n            } else if (data.knife_detected) {\r\n              setAlarmMessage('ðŸš¨ Knife detected! ðŸš¨');\r\n              // Play alarm for knife detection\r\n              if (audioRef.current) {\r\n                audioRef.current.play().catch((err) => {\r\n                  console.error('Error playing sound:', err);\r\n                });\r\n              }\r\n            } else {\r\n              setAlarmMessage('');\r\n            }\r\n          })\r\n          .catch(err => console.error('Error fetching detection status', err));\r\n      }, 1000);  // Poll every second\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [isVideoStarted]);  // Only start polling after the video feed is started\r\n\r\n  const startVideoFeed = () => {\r\n    setIsVideoStarted(true);  // Start video feed when the user clicks the button\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center\">\r\n      <h2 className=\"text-2xl mb-4\">Live Video Feed</h2>\r\n\r\n      {/* Start button for user interaction */}\r\n      {!isVideoStarted && (\r\n        <button\r\n          onClick={startVideoFeed}\r\n          className=\"px-6 py-3 bg-blue-500 text-white rounded-lg mb-4\"\r\n        >\r\n          Start Live Video Feed\r\n        </button>\r\n      )}\r\n\r\n      {/* Show live video feed only after start */}\r\n      {isVideoStarted && (\r\n        <img\r\n          src=\"http://127.0.0.1:5000/video_feed\"\r\n          alt=\"Live feed\"\r\n          className=\"border border-gray-300 rounded-lg\"\r\n        />\r\n      )}\r\n\r\n      {/* Show alarm message if a gun or knife is detected */}\r\n      {alarmMessage && (\r\n        <div className=\"mt-4 text-red-600 font-bold text-xl\">\r\n          {alarmMessage}\r\n        </div>\r\n      )}\r\n\r\n      {/* Render bounding boxes */}\r\n      <div className=\"mt-4 relative\">\r\n        {boundingBoxes.map((box, index) => (\r\n          <div\r\n            key={index}\r\n            className=\"absolute\"\r\n            style={{\r\n              top: `${box[1]}px`,\r\n              left: `${box[0]}px`,\r\n              width: `${box[2] - box[0]}px`,\r\n              height: `${box[3] - box[1]}px`,\r\n              border: box[4] === 'gun' || box[4] === 'knife' ? '2px solid red' : '2px solid green',\r\n            }}\r\n          ></div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Audio element for sound */}\r\n      <audio ref={audioRef} preload=\"auto\">\r\n        {/* Use your alarm sound file */}\r\n        <source src=\"/mixkit-classic-alarm-995.wav\" type=\"audio/wav\" />\r\n        Your browser does not support the audio element.\r\n      </audio>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LiveFeed;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}